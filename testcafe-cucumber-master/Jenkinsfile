pipeline {
  agent any
 
  //tools {nodejs "recent_node"}
  try{
 
        stages {  
            stage('Clonning Git') {
                steps {
                    git 'https://github.com/ivan-molina/TFM_CUCUMBER.git'
                }
            }
            
            stage('Install dependencies') {
                steps {
                    bat '''
                        echo '------------Install dependencies--------------'
                        cd testcafe-cucumber-master
                        npm install
                        npm install testcafe
                        npm i gherkin-testcafe cucumber
                        npm install cucumber-html-reporter --save-dev
                    '''
                }
            }

            stage('Execute test') {
                steps {
                    bat '''
                        echo '------------Execute test--------------'
                        cd testcafe-cucumber-master
                        ./node_modules/.bin/cucumber-js.cmd --format json:./reports/report.json    
                    '''
                    //npm run test-chrome
                }
            }

            stage('Generate reports') {
                steps {
                    bat '''
                        echo '------------Publish reports--------------'
                        cd testcafe-cucumber-master
                        node index.js
                    '''
                }
            } 

            stage('Publish HTML Report') {
                steps{
                    publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'testcafe-cucumber-master/test/report',
                        reportFiles: 'cucumber_report.html',
                        reportName: "cucumber_report.html"
                    ])
                }
            } 

            stage('Generate CUCUMBER REPORT') {
                steps{
                    cucumber buildStatus: "UNSTABLE",
                    fileIncludePattern: "report.json",
                    jsonReportDirectory: 'testcafe-cucumber-master/reports'
                }
            } 
            
        }
    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }


    def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
    }    



}